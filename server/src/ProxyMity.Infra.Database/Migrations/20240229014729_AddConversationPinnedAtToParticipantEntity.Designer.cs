// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProxyMity.Infra.Database.Contexts;

#nullable disable

namespace ProxyMity.Infra.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240229014729_AddConversationPinnedAtToParticipantEntity")]
    partial class AddConversationPinnedAtToParticipantEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProxyMity.Domain.Entities.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GroupId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("conversation");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Friendship", b =>
                {
                    b.Property<string>("TargetId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("RequesterId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeniedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TargetId", "RequesterId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Friendship");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("group");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("ReadByAllAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReceivedByAllAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RepliedMessageId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("WrittenAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("RepliedMessageId");

                    b.ToTable("message");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.MessageStatus", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ConversationId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("MessageId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "ConversationId", "MessageId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("MessageId");

                    b.ToTable("message_status");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Participant", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ConversationId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("ConversationPinnedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("participant");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastOnline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("ProxyMity.Domain.Entities.Group", "Group")
                        .WithOne("Conversation")
                        .HasForeignKey("ProxyMity.Domain.Entities.Conversation", "GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Friendship", b =>
                {
                    b.HasOne("ProxyMity.Domain.Entities.User", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProxyMity.Domain.Entities.User", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requester");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Message", b =>
                {
                    b.HasOne("ProxyMity.Domain.Entities.User", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProxyMity.Domain.Entities.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProxyMity.Domain.Entities.Message", "RepliedMessage")
                        .WithMany()
                        .HasForeignKey("RepliedMessageId");

                    b.Navigation("Author");

                    b.Navigation("Conversation");

                    b.Navigation("RepliedMessage");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.MessageStatus", b =>
                {
                    b.HasOne("ProxyMity.Domain.Entities.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProxyMity.Domain.Entities.Message", "Message")
                        .WithMany("MessageStatuses")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProxyMity.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Notification", b =>
                {
                    b.HasOne("ProxyMity.Domain.Entities.Conversation", "Conversation")
                        .WithMany("Notifications")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProxyMity.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Participant", b =>
                {
                    b.HasOne("ProxyMity.Domain.Entities.Conversation", "Conversation")
                        .WithMany("Participants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProxyMity.Domain.Entities.User", "User")
                        .WithMany("Participations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Group", b =>
                {
                    b.Navigation("Conversation")
                        .IsRequired();
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.Message", b =>
                {
                    b.Navigation("MessageStatuses");
                });

            modelBuilder.Entity("ProxyMity.Domain.Entities.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Participations");
                });
#pragma warning restore 612, 618
        }
    }
}
